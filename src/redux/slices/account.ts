import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../redux/store/store';
import { fetchCount } from '../api';

export interface AccountState {
  name: string
  publicAddress: string
  accountBalance: {
    token: string,
    amount: number
  }[]
  status: 'idle' | 'loading' | 'failed'
}

const initialState: AccountState = {
  name: 'Account 1',
  publicAddress: '0xb701FdCc9Db05d5AD0d7B6aAbb42DBf09ec28Ad0',
  accountBalance: [
    { token: 'reth', amount: 32 },
    { token: 'weenus', amount: 20000 },
  ],
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

// export const incrementAsync = createAsyncThunk(
//   'counter/fetchCount',
//   async (amount: number) => {
//     const response = await fetchCount(amount);
//     // The value we return becomes the `fulfilled` action payload
//     return response.data;
//   }
// );

export const accountSlice = createSlice({
  name: 'account',
  initialState,
  reducers: {
    addBalance: (state, action: PayloadAction<any>) => {
      state.accountBalance.filter((x: any) => x.token === action.payload.token)[0].amount += action.payload.amount;
    },
    reduceBalance: (state, action: PayloadAction<any>) => {
      state.accountBalance.filter((x: any) => x.token === action.payload.token)[0].amount -= action.payload.amount;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.

  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     })
  //     .addCase(incrementAsync.rejected, (state) => {
  //       state.status = 'failed';
  //     });
  // },
});

export const { addBalance, reduceBalance } = accountSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const getAccountName = (state: RootState) => state.account.name;
export const getPublicAddress = (state: RootState) => state.account.publicAddress;
export const getAccountBalance = (state: RootState) => state.account.accountBalance;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectCount(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default accountSlice.reducer;
